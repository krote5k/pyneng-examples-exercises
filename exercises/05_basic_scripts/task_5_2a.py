# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""

ip = input('Введите адрес/маску в формате 10.1.1.0/24:')
ip_mask = ip.split('/')
addr = str(ip_mask[0])
oct1, oct2, oct3, oct4 = addr.split('.')
mask = int(ip_mask[1])
print('Network:')
#print(f'{oct1:8}  {oct2:8}  {oct3:8}  {oct4:8}')
#print(f'{int(oct1):08b}  {int(oct2):08b}  {int(oct3):08b}  {int(oct4):08b}')
ip_bin = f'{int(oct1):08b}{int(oct2):08b}{int(oct3):08b}{int(oct4):08b}'
ip_net = ip_bin[0:mask] + '0' * (32 - mask)
oct1_1, oct2_1, oct3_1, oct4_1 = ip_net[0:8], ip_net[8:16], ip_net[16:24], ip_net[24:32]
print(f'{int(oct1_1, 2):<8}  {int(oct2_1, 2):<8}  {int(oct3_1, 2):<8}  {int(oct4_1, 2):<8}')
print(f'{oct1_1:8}  {oct2_1:8}  {oct3_1:8}  {oct4_1:8}')
print('\nMask:')
print(f'/{mask}')
mask_bin = mask * '1' + '0' * (32 - mask)
oct11, oct12, oct13, oct14 = mask_bin[0:8], mask_bin[8:16], mask_bin[16:24], mask_bin[24:]
print(f'{int(oct11, 2):<8}  {int(oct12, 2):<8}  {int(oct13, 2):<8}  {int(oct14, 2):<8}')
print(f'{oct11:8}  {oct12:8}  {oct13:8}  {oct14:8}')

